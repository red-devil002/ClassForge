// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id        String   @id
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role
  teacher   Teacher?
  student   Student?
}

model Teacher {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  gender    String?
  bio       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  students  Student[]
}

model Student {
  id                   String   @id @default(cuid()) // Matches Python: id as String
  userId               String   @unique // Unique identifier from auth (e.g., Supabase)
  name                 String @unique
  gender               String?
  age                  Int?
  academicScore        Float // Used in GCN
  classId              Int?
  grades               String?
  wellBeingScore       Float // Used in GCN
  socioEconomicsStatus String?
  activities           String
  teacherId            String? // Optional FK
  friends              String?
  disrespectfull       String?
  teacher              Teacher? @relation(fields: [teacherId], references: [id])
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  class                Class?   @relation(fields: [classId], references: [id])
}

model Class {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  students Student[]
}
